// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kitchen/v1/kitchen.proto

package kitchenv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "kitchen/proto/gen/kitchen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KitchenServiceName is the fully-qualified name of the KitchenService service.
	KitchenServiceName = "kitchen.v1.KitchenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KitchenServiceCreatePostProcedure is the fully-qualified name of the KitchenService's CreatePost
	// RPC.
	KitchenServiceCreatePostProcedure = "/kitchen.v1.KitchenService/CreatePost"
	// KitchenServiceGetPostProcedure is the fully-qualified name of the KitchenService's GetPost RPC.
	KitchenServiceGetPostProcedure = "/kitchen.v1.KitchenService/GetPost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kitchenServiceServiceDescriptor          = v1.File_kitchen_v1_kitchen_proto.Services().ByName("KitchenService")
	kitchenServiceCreatePostMethodDescriptor = kitchenServiceServiceDescriptor.Methods().ByName("CreatePost")
	kitchenServiceGetPostMethodDescriptor    = kitchenServiceServiceDescriptor.Methods().ByName("GetPost")
)

// KitchenServiceClient is a client for the kitchen.v1.KitchenService service.
type KitchenServiceClient interface {
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
}

// NewKitchenServiceClient constructs a client for the kitchen.v1.KitchenService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKitchenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KitchenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kitchenServiceClient{
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+KitchenServiceCreatePostProcedure,
			connect.WithSchema(kitchenServiceCreatePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPost: connect.NewClient[v1.GetPostRequest, v1.GetPostResponse](
			httpClient,
			baseURL+KitchenServiceGetPostProcedure,
			connect.WithSchema(kitchenServiceGetPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kitchenServiceClient implements KitchenServiceClient.
type kitchenServiceClient struct {
	createPost *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	getPost    *connect.Client[v1.GetPostRequest, v1.GetPostResponse]
}

// CreatePost calls kitchen.v1.KitchenService.CreatePost.
func (c *kitchenServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// GetPost calls kitchen.v1.KitchenService.GetPost.
func (c *kitchenServiceClient) GetPost(ctx context.Context, req *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// KitchenServiceHandler is an implementation of the kitchen.v1.KitchenService service.
type KitchenServiceHandler interface {
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
}

// NewKitchenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKitchenServiceHandler(svc KitchenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kitchenServiceCreatePostHandler := connect.NewUnaryHandler(
		KitchenServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(kitchenServiceCreatePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kitchenServiceGetPostHandler := connect.NewUnaryHandler(
		KitchenServiceGetPostProcedure,
		svc.GetPost,
		connect.WithSchema(kitchenServiceGetPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/kitchen.v1.KitchenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KitchenServiceCreatePostProcedure:
			kitchenServiceCreatePostHandler.ServeHTTP(w, r)
		case KitchenServiceGetPostProcedure:
			kitchenServiceGetPostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKitchenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKitchenServiceHandler struct{}

func (UnimplementedKitchenServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kitchen.v1.KitchenService.CreatePost is not implemented"))
}

func (UnimplementedKitchenServiceHandler) GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kitchen.v1.KitchenService.GetPost is not implemented"))
}
